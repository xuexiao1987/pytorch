name: ios-build-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
        description: Top-level label for what's being built/tested.
      ios-platform:
        required: true
        type: string
        description: Which iOS platform to build for.
      ios-arch:
        required: true
        type: string
        description: Which iOS arch to build for.
      sync-tag:
        required: false
        type: string
        default: ""
        description: |
          If this is set, our linter will use this to make sure that every other
          job with the same `sync-tag` is identical.

    secrets:
      IOS_CERT_KEY_2022:
        required: true
        description: ios cert
      IOS_CERT_SECRET:
        required: true
        description: ios cert
      IOS_DEV_TEAM_ID:
        required: true
        description: ios cert
      IOS_SIGN_KEY_2022:
        required: true
        description: ios cert

env:
  GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
  IOS_PLATFORM: ${{ inputs.ios-platform }}
  IOS_ARCH: ${{ inputs.ios-arch }}

jobs:
  build:
    # NOTE: These builds will not run successfully without running on `pytorch/pytorch` due to the limitations
    #       of accessing secrets from forked pull requests and IOS' dependency on secrets for their build/test
    if: github.repository_owner == 'pytorch'
    runs-on: macos-12
    timeout-minutes: 240
    env:
      IOS_CERT_KEY_2022: ${{ secrets.IOS_CERT_KEY_2022 }}
      IOS_CERT_SECRET: ${{ secrets.IOS_CERT_SECRET }}
      IOS_DEV_TEAM_ID: ${{ secrets.IOS_DEV_TEAM_ID }}
      IOS_SIGN_KEY_2022: ${{ secrets.IOS_SIGN_KEY_2022 }}
    steps:
      # [see note: pytorch repo ref]
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@master

      - name: Populate CI build options
        run: |
          # Most builds use the lite interpreter, if certain builds shouldn't
          # build the lite interpreter this env variable should get over-written
          # in the following case statement
          echo "BUILD_LITE_INTERPRETER=1" >> "${GITHUB_ENV}"

          case ${BUILD_ENVIRONMENT} in
            *metal*)
              echo "USE_PYTORCH_METAL=1" >> "${GITHUB_ENV}"
              ;;
            *full_jit*)
              echo "BUILD_LITE_INTERPRETER=0" >> "${GITHUB_ENV}"
              ;;
            *custom*)
              echo "SELECTED_OP_LIST=${GITHUB_WORKSPACE}/ios/TestApp/custom_build/mobilenetv2.yaml" >> "${GITHUB_ENV}"
              ;;
            *coreml*)
              echo "USE_COREML_DELEGATE=1" >> "${GITHUB_ENV}"
              ;;
          esac

      - name: Install brew dependencies
        run: |
          # Install dependencies
          brew install libtool

      - name: Install conda and dependencies
        run: |
          # Install conda, setup-miniconda messes with the path that messes with the ruby stuff we do later on
          curl --retry 3 -o "${RUNNER_TEMP}/conda.sh" https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
          chmod +x "${RUNNER_TEMP}/conda.sh"
          /bin/bash "${RUNNER_TEMP}/conda.sh" -b -p "${RUNNER_TEMP}/anaconda"
          echo "${RUNNER_TEMP}/anaconda/bin" >> "${GITHUB_PATH}"
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          conda install -y \
            cffi \
            cmake \
            mkl \
            mkl-include \
            ninja \
            numpy \
            pyyaml \
            requests \
            setuptools \
            typing_extensions

      - name: Run Fastlane
        run: |
          set -x
          cd ios/TestApp
          # install fastlane
          sudo gem install bundler && bundle install
          bundle update fastlane
          # install certificates
          echo "${IOS_CERT_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o Certificates.p12
          rm cert.txt
          bundle exec fastlane install_root_cert
          bundle exec fastlane install_dev_cert
          # install the provisioning profile
          PROFILE=PyTorch_CI_2022.mobileprovision
          PROVISIONING_PROFILES=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -pv "${PROVISIONING_PROFILES}"
          cd "${PROVISIONING_PROFILES}"
          echo "${IOS_SIGN_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o ${PROFILE}
          rm cert.txt

      - name: Build
        run: |
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          export TCLLIBPATH="/usr/local/lib"
          python -VV
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname "$(which conda)")/../"}
          scripts/build_ios.sh

      - name: Run Build Test
        run: |
          PROFILE=PyTorch_CI_2022
          # run the ruby build script
          if ! [ -x "$(command -v xcodebuild)" ]; then
            echo 'Error: xcodebuild is not installed.'
            exit 1
          fi
          if [ "${IOS_PLATFORM}" != "SIMULATOR" ]; then
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}" -c "${PROFILE}" -t "${IOS_DEV_TEAM_ID}"
          else
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}"
          fi

      - name: Run Simulator Tests
        if: inputs.ios-platform == 'SIMULATOR'
        run: |
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          trap '{ echo "villedepommes start"; ls /Users/runner/Library/Logs/scan; echo "villedepommes exact log"; cat /Users/runner/Library/Logs/scan/TestAppTests-TestAppTests.log; echo "villedepommes wildcard log"; cat /Users/runner/Library/Logs/scan/*.log; echo "villedepommes junit report"; echo /Users/runner/work/pytorch/pytorch/ios/TestApp/fastlane/test_output/report.html; echo "villedepommes end"; exit 1; }' EXIT
          # use the pytorch nightly build to generate models
          pip3 install --pre torch torchvision torchaudio -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
          # generate models for differnet backends
          cd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          mkdir -p ../models
          if [ "${USE_COREML_DELEGATE}" == 1 ]; then
            pip install coremltools==5.0b5 protobuf==3.20.1
            pip install six==1.16.0
            python coreml_backend.py
          else
            cd "${GITHUB_WORKSPACE}"
            python test/mobile/model_test/gen_test_model.py ios-test
          fi
          cd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            echo "Setting up the TestApp for LiteInterpreter"
            ruby setup.rb --lite 1
          else
            echo "Setting up the TestApp for Full JIT"
            ruby setup.rb
          fi
          cd "${GITHUB_WORKSPACE}/ios/TestApp"
          # instruments -s -devices
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            if [ "${USE_COREML_DELEGATE}" == 1 ]; then
              bundle exec fastlane scan --only_testing TestAppTests/TestAppTests/testCoreML
            else
              bundle exec fastlane scan --skip_testing TestAppTests/TestAppTests/testCoreML
            fi
          else
            bundle exec fastlane scan --only_testing TestAppTests/TestAppTests/testFullJIT
          fi
      - name: Dump Simulator Tests
        if: failure()
        run: |
          # shellcheck disable=SC1091
          echo "villedepommes start 222"
          ls /Users/runner/Library/Logs/scan
          echo "villedepommes exact log 222"
          cat /Users/runner/Library/Logs/scan/TestAppTests-TestAppTests.log
          echo "villedepommes wildcard log 222"
          cat /Users/runner/Library/Logs/scan/*.log
          echo "villedepommes junit report 222"
          echo /Users/runner/work/pytorch/pytorch/ios/TestApp/fastlane/test_output/report.html
          echo "villedepommes end 222"
